kge_PRMS_Obs <- KGE(df$PRMS_mean, df$Obs_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_RAVEN_Obs <- KGE(df$RAVEN_mean,df$Obs_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_HYPE_RAVEN <- KGE(df$HYPE_mean, df$RAVEN_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_HYPE_PRMS <- KGE(df$HYPE_mean, df$PRMS_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_PRMS_RAVEN <- KGE(df$PRMS_mean,df$RAVEN_mean, s = c(1, 1, 1), na.rm = TRUE)
nse_HYPE_Obs <- NSE(df$HYPE_mean, df$Obs_mean, na.rm = FALSE)
nse_PRMS_Obs <- NSE(df$PRMS_mean, df$Obs_mean, na.rm = FALSE)
nse_RAVEN_Obs <- NSE(df$RAVEN_mean,df$Obs_mean, na.rm = FALSE)
nse_HYPE_PRMS <- NSE(df$HYPE_mean, df$PRMS_mean, na.rm = FALSE)
nse_HYPE_RAVEN <- NSE(df$HYPE_mean, df$RAVEN_mean, na.rm = FALSE)
nse_PRMS_RAVEN <- NSE(df$PRMS_mean,df$RAVEN_mean, na.rm = FALSE)
lnse_HYPE_Obs <- calculate_log_nse(df$HYPE_mean, df$Obs_mean)
lnse_PRMS_Obs <- calculate_log_nse(df$PRMS_mean, df$Obs_mean)
lnse_RAVEN_Obs <- calculate_log_nse(df$RAVEN_mean, df$Obs_mean)
lnse_HYPE_PRMS <- calculate_log_nse(df$HYPE_mean, df$PRMS_mean)
lnse_HYPE_RAVEN <- calculate_log_nse(df$RAVEN_mean, df$RAVEN_mean)
lnse_PRMS_RAVEN <- calculate_log_nse(df$PRMS_mean, df$RAVEN_mean)
# Store the results in a named list
kge_nse_irr[[gauge_name]] <- list(
kge_HYPE_Obs = kge_HYPE_Obs,
kge_PRMS_Obs = kge_PRMS_Obs,
kgeRAVEN_Obs = kge_RAVEN_Obs,
kge_HYPE_RAVEN = kge_HYPE_RAVEN,
kge_HYPE_PRMS = kge_HYPE_PRMS,
kge_PRMS_RAVEN = kge_PRMS_RAVEN,
nse_HYPE_Obs  = nse_HYPE_Obs,
nse_PRMS_Obs  =  nse_PRMS_Obs,
nse_RAVEN_Obs = nse_RAVEN_Obs,
nse_HYPE_PRMS =  nse_HYPE_PRMS,
nse_HYPE_RAVEN = nse_HYPE_RAVEN,
nse_PRMS_RAVEN= nse_PRMS_RAVEN,
lnse_HYPE_Obs = lnse_HYPE_Obs,
lnse_PRMS_Obs = lnse_PRMS_Obs,
lnse_RAVEN_Obs = lnse_RAVEN_Obs,
lnse_HYPE_PRMS = lnse_HYPE_PRMS,
lnse_HYPE_RAVEN = lnse_HYPE_RAVEN,
lnse_PRMS_RAVEN = lnse_PRMS_RAVEN
)
}
# calculate for MONTHLY timestep. Loop through each gauge name
for (gauge_name in name_all) {
# Extract the data frame for the current gauge
df <- monthly_data_list[[gauge_name]]
kge_HYPE_Obs <- KGE(df$HYPE_mean, df$Obs_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_PRMS_Obs <- KGE(df$PRMS_mean, df$Obs_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_RAVEN_Obs <- KGE(df$RAVEN_mean,df$Obs_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_HYPE_RAVEN <- KGE(df$HYPE_mean, df$RAVEN_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_HYPE_PRMS <- KGE(df$HYPE_mean, df$PRMS_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_PRMS_RAVEN <- KGE(df$PRMS_mean,df$RAVEN_mean, s = c(1, 1, 1), na.rm = TRUE)
nse_HYPE_Obs <- NSE(df$HYPE_mean, df$Obs_mean, na.rm = FALSE)
nse_PRMS_Obs <- NSE(df$PRMS_mean, df$Obs_mean, na.rm = FALSE)
nse_RAVEN_Obs <- NSE(df$RAVEN_mean,df$Obs_mean, na.rm = FALSE)
nse_HYPE_PRMS <- NSE(df$HYPE_mean, df$PRMS_mean, na.rm = FALSE)
nse_HYPE_RAVEN <- NSE(df$HYPE_mean, df$RAVEN_mean, na.rm = FALSE)
nse_PRMS_RAVEN <- NSE(df$PRMS_mean,df$RAVEN_mean, na.rm = FALSE)
lnse_HYPE_Obs <- calculate_log_nse(df$HYPE_mean, df$Obs_mean)
lnse_PRMS_Obs <- calculate_log_nse(df$PRMS_mean, df$Obs_mean)
lnse_RAVEN_Obs <- calculate_log_nse(df$RAVEN_mean, df$Obs_mean)
lnse_HYPE_PRMS <- calculate_log_nse(df$HYPE_mean, df$PRMS_mean)
lnse_HYPE_RAVEN <- calculate_log_nse(df$RAVEN_mean, df$RAVEN_mean)
lnse_PRMS_RAVEN <- calculate_log_nse(df$PRMS_mean, df$RAVEN_mean)
# Store the results in a named list
kge_nse_monthly[[gauge_name]] <- list(
kge_HYPE_Obs = kge_HYPE_Obs,
kge_PRMS_Obs = kge_PRMS_Obs,
kgeRAVEN_Obs = kge_RAVEN_Obs,
kge_HYPE_RAVEN = kge_HYPE_RAVEN,
kge_HYPE_PRMS = kge_HYPE_PRMS,
kge_PRMS_RAVEN = kge_PRMS_RAVEN,
nse_HYPE_Obs  = nse_HYPE_Obs,
nse_PRMS_Obs  =  nse_PRMS_Obs,
nse_RAVEN_Obs = nse_RAVEN_Obs,
nse_HYPE_PRMS =  nse_HYPE_PRMS,
nse_HYPE_RAVEN = nse_HYPE_RAVEN,
nse_PRMS_RAVEN= nse_PRMS_RAVEN,
lnse_HYPE_Obs = lnse_HYPE_Obs,
lnse_PRMS_Obs = lnse_PRMS_Obs,
lnse_RAVEN_Obs = lnse_RAVEN_Obs,
lnse_HYPE_PRMS = lnse_HYPE_PRMS,
lnse_HYPE_RAVEN = lnse_HYPE_RAVEN,
lnse_PRMS_RAVEN = lnse_PRMS_RAVEN
)
}
kge_nse_monthly <- list()
# calculate for MONTHLY timestep. Loop through each gauge name
for (gauge_name in name_all) {
# Extract the data frame for the current gauge
df <- monthly_data_list[[gauge_name]]
kge_HYPE_Obs <- KGE(df$HYPE_mean, df$Obs_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_PRMS_Obs <- KGE(df$PRMS_mean, df$Obs_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_RAVEN_Obs <- KGE(df$RAVEN_mean,df$Obs_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_HYPE_RAVEN <- KGE(df$HYPE_mean, df$RAVEN_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_HYPE_PRMS <- KGE(df$HYPE_mean, df$PRMS_mean, s = c(1, 1, 1), na.rm = TRUE)
kge_PRMS_RAVEN <- KGE(df$PRMS_mean,df$RAVEN_mean, s = c(1, 1, 1), na.rm = TRUE)
nse_HYPE_Obs <- NSE(df$HYPE_mean, df$Obs_mean, na.rm = FALSE)
nse_PRMS_Obs <- NSE(df$PRMS_mean, df$Obs_mean, na.rm = FALSE)
nse_RAVEN_Obs <- NSE(df$RAVEN_mean,df$Obs_mean, na.rm = FALSE)
nse_HYPE_PRMS <- NSE(df$HYPE_mean, df$PRMS_mean, na.rm = FALSE)
nse_HYPE_RAVEN <- NSE(df$HYPE_mean, df$RAVEN_mean, na.rm = FALSE)
nse_PRMS_RAVEN <- NSE(df$PRMS_mean,df$RAVEN_mean, na.rm = FALSE)
lnse_HYPE_Obs <- calculate_log_nse(df$HYPE_mean, df$Obs_mean)
lnse_PRMS_Obs <- calculate_log_nse(df$PRMS_mean, df$Obs_mean)
lnse_RAVEN_Obs <- calculate_log_nse(df$RAVEN_mean, df$Obs_mean)
lnse_HYPE_PRMS <- calculate_log_nse(df$HYPE_mean, df$PRMS_mean)
lnse_HYPE_RAVEN <- calculate_log_nse(df$RAVEN_mean, df$RAVEN_mean)
lnse_PRMS_RAVEN <- calculate_log_nse(df$PRMS_mean, df$RAVEN_mean)
# Store the results in a named list
kge_nse_monthly[[gauge_name]] <- list(
kge_HYPE_Obs = kge_HYPE_Obs,
kge_PRMS_Obs = kge_PRMS_Obs,
kgeRAVEN_Obs = kge_RAVEN_Obs,
kge_HYPE_RAVEN = kge_HYPE_RAVEN,
kge_HYPE_PRMS = kge_HYPE_PRMS,
kge_PRMS_RAVEN = kge_PRMS_RAVEN,
nse_HYPE_Obs  = nse_HYPE_Obs,
nse_PRMS_Obs  =  nse_PRMS_Obs,
nse_RAVEN_Obs = nse_RAVEN_Obs,
nse_HYPE_PRMS =  nse_HYPE_PRMS,
nse_HYPE_RAVEN = nse_HYPE_RAVEN,
nse_PRMS_RAVEN= nse_PRMS_RAVEN,
lnse_HYPE_Obs = lnse_HYPE_Obs,
lnse_PRMS_Obs = lnse_PRMS_Obs,
lnse_RAVEN_Obs = lnse_RAVEN_Obs,
lnse_HYPE_PRMS = lnse_HYPE_PRMS,
lnse_HYPE_RAVEN = lnse_HYPE_RAVEN,
lnse_PRMS_RAVEN = lnse_PRMS_RAVEN
)
}
df_monthly <- convert_list_to_df(kge_nse_monthly)
# Define file names
file_daily <- "Results/metrics/kge_nse_daily.csv"
file_weekly <- "Results/metrics/kge_nse_weekly.csv"
file_monthly <- "Results/metrics/kge_nse_monthly.csv"
file_irr <- "Results/metrics/kge_nse_irr.csv"
file_seasonal <- "Results/metrics/kge_nse_seasonal.csv"
# Write data frames to CSV files
write.csv(df_daily, file = file_daily, row.names = FALSE)
write.csv(df_weekly, file = file_weekly, row.names = FALSE)
write.csv(df_monthly, file = file_monthly, row.names = FALSE)
write.csv(df_irr, file = file_irr, row.names = FALSE)
write.csv(df_seasonal, file = file_seasonal, row.names = FALSE)
file_metric_daily <- "Results/metrics/metrics_daily.csv"
file_metric_weekly <- "Results/metrics/metrics_weekly.csv"
file_metric_monthly <- "Results/metrics/metrics_monthly.csv"
file_metric_irr <- "Results/metrics/metrics_irr.csv"
file_metric_seasonal <- "Results/metrics/metrics_seasonal.csv"
write.csv(summary_results_daily, file = file_metric_daily, row.names = FALSE)
write.csv(summary_results_weekly, file = file_metric_weekly, row.names = FALSE)
write.csv(summary_results_monthly, file = file_metric_monthly, row.names = FALSE)
write.csv(summary_results_irr, file = file_metric_irr, row.names = FALSE)
write.csv(summary_results_seasonal, file = file_metric_seasonal, row.names = FALSE)
## DYNAMIC PLOT SHOWING THE HYDROGRAPH
# Define a function to create and save a dygraph plot
create_dygraph <- function(gauge_name) {
# Create initial data frame with dates
df_HYPE_PRMS_Obs_RAVEN <- data.frame(Date = Obs_flow$Date)
# Merge the data frames for each model and observed data
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, HYPE_Data_All[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, PRMS_Data_All[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, Obs_flow[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, RAVEN_Data_All[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
# Rename columns appropriately
colnames(df_HYPE_PRMS_Obs_RAVEN)[2:5] <- c("HYPE", "PRMS", "Obs", "RAVEN")
# Convert the data frame to an xts object
xts_HYPE_PRMS_Obs_RAVEN <- xts(
x = df_HYPE_PRMS_Obs_RAVEN[, c("HYPE", "PRMS", "Obs", "RAVEN")],
order.by = df_HYPE_PRMS_Obs_RAVEN$Date
)
# Create the dygraph
dygraph_HYPE_PRMS_Obs_RAVEN <- dygraph(xts_HYPE_PRMS_Obs_RAVEN, main = sprintf("Hydrograph for %s", gauge_name)) %>%
dySeries("HYPE", label = "HYPE") %>%
dySeries("PRMS", label = "PRMS") %>%
dySeries("RAVEN", label = "RAVEN") %>%
dySeries("Obs", label = "Obs") %>%
dyAxis("y", label = "Flows (cms)", valueRange = c(0, 450)) %>%
dyAxis("x", label = "Year") %>%
dyOptions(colors = c("blue", "gray", "red", "black")) %>%
dyHide() %>%
dyRangeSelector() %>%
dyCSS("Files/SMMR Comnparison Code/legend.css")
# Save the dygraph as an HTML file
file_save <- sprintf("Results/dygraph/%s.html", gauge_name)
saveWidget(dygraph_HYPE_PRMS_Obs_RAVEN, file = file_save, selfcontained = TRUE)
}
# Loop through all gauge names and create dygraphs
for (gauge_name in name_all) {
create_dygraph(gauge_name)
}
create_dygraph <- function(gauge_name) {
# Create initial data frame with dates
df_HYPE_PRMS_Obs_RAVEN <- data.frame(Date = Obs_flow$Date)
# Merge the data frames for each model and observed data
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, HYPE_Data_All[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, PRMS_Data_All[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, Obs_flow[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, RAVEN_Data_All[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
# Rename columns appropriately
colnames(df_HYPE_PRMS_Obs_RAVEN)[2:5] <- c("HYPE", "PRMS", "Obs", "RAVEN")
# Convert the data frame to an xts object
xts_HYPE_PRMS_Obs_RAVEN <- xts(
x = df_HYPE_PRMS_Obs_RAVEN[, c("HYPE", "PRMS", "Obs", "RAVEN")],
order.by = df_HYPE_PRMS_Obs_RAVEN$Date
)
# Create the dygraph
dygraph_HYPE_PRMS_Obs_RAVEN <- dygraph(xts_HYPE_PRMS_Obs_RAVEN, main = sprintf("Hydrograph for %s", gauge_name)) %>%
dySeries("HYPE", label = "HYPE") %>%
dySeries("PRMS", label = "PRMS") %>%
dySeries("RAVEN", label = "RAVEN") %>%
dySeries("Obs", label = "Obs") %>%
dyAxis("y", label = "Flows (cms)", valueRange = c(0, 450)) %>%
dyAxis("x", label = "Year") %>%
dyOptions(colors = c("blue", "gray", "red", "black")) %>%
dyHide() %>%
dyRangeSelector() %>%
dyCSS("Files/SMMR Comnparison Code/legend.css")
# Save the dygraph as an HTML file
file_save <- sprintf("Results/dygraph/%s.html", gauge_name)
saveWidget(dygraph_HYPE_PRMS_Obs_RAVEN, file = file_save, selfcontained = TRUE)
}
for (gauge_name in name_all) {
create_dygraph(gauge_name)
}
create_dygraph <- function(gauge_name) {
# Create initial data frame with dates
df_HYPE_PRMS_Obs_RAVEN <- data.frame(Date = Obs_flow$Date)
# Merge the data frames for each model and observed data
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, HYPE_Data_All[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, PRMS_Data_All[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, Obs_flow[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
df_HYPE_PRMS_Obs_RAVEN <- merge(df_HYPE_PRMS_Obs_RAVEN, RAVEN_Data_All[, c("Date", gauge_name)], by = "Date", all.x = TRUE)
# Rename columns appropriately
colnames(df_HYPE_PRMS_Obs_RAVEN)[2:5] <- c("HYPE", "PRMS", "Obs", "RAVEN")
# Convert the data frame to an xts object
xts_HYPE_PRMS_Obs_RAVEN <- xts(
x = df_HYPE_PRMS_Obs_RAVEN[, c("HYPE", "PRMS", "Obs", "RAVEN")],
order.by = df_HYPE_PRMS_Obs_RAVEN$Date
)
# Create the dygraph
dygraph_HYPE_PRMS_Obs_RAVEN <- dygraph(xts_HYPE_PRMS_Obs_RAVEN, main = sprintf("Hydrograph for %s", gauge_name)) %>%
dySeries("HYPE", label = "HYPE") %>%
dySeries("PRMS", label = "PRMS") %>%
dySeries("RAVEN", label = "RAVEN") %>%
dySeries("Obs", label = "Obs") %>%
dyAxis("y", label = "Flows (cms)", valueRange = c(0, 450)) %>%
dyAxis("x", label = "Year") %>%
dyOptions(colors = c("blue", "gray", "red", "black")) %>%
dyHide() %>%
dyRangeSelector() %>%
dyCSS("Code/legend.css")
# Save the dygraph as an HTML file
file_save <- sprintf("Results/dygraph/%s.html", gauge_name)
saveWidget(dygraph_HYPE_PRMS_Obs_RAVEN, file = file_save, selfcontained = TRUE)
}
# Loop through all gauge names and create dygraphs
for (gauge_name in name_all) {
create_dygraph(gauge_name)
}
View(RAVEN_Data_All)
############ Scatterplot
start_date <- as.POSIXct("1980-10-01")
end_date <- as.POSIXct("2015-09-30")
# Subset the data within the given time frame
subset_Obs_flow <- Obs_flow[Obs_flow$Date >= start_date & Obs_flow$Date <= end_date, c("Date", name)]
subset_PRMS_Data <- PRMS_Data_All[PRMS_Data_All$Date >= start_date & PRMS_Data_All$Date <= end_date, c("Date", name)]
subset_HYPE_Data <- HYPE_Data_All[HYPE_Data_All$Date >= start_date & HYPE_Data_All$Date <= end_date, c("Date", name)]
subset_RAVEN_Data <- RAVEN_Data_All[HYPE_Data_All$Date >= start_date & HYPE_Data_All$Date <= end_date, c("Date", name)]
# Plot the subset data
# Calculate the range for the axes
min_value <- min(c(subset_Obs_flow[[name]], subset_PRMS_Data[[name]], subset_HYPE_Data[[name]], subset_RAVEN_Data[[name]]), na.rm = TRUE)
max_value <- max(c(subset_Obs_flow[[name]], subset_PRMS_Data[[name]], subset_HYPE_Data[[name]], subset_RAVEN_Data[[name]]), na.rm = TRUE)
range_values <- c(min_value, max_value)
# Set up a 1x2 grid for plots
par(mfrow = c(1, 3))
# Create the scatter plot with equal axis limits
plot(subset_Obs_flow[[name]], subset_PRMS_Data[[name]],
main = paste("Scatterplot for PRMS"),
xlab = "Observed",
ylab = "PRMS",
pch = 19,
xlim = range_values,
ylim = range_values)
# Add a red, dashed line
abline(a = 0, b = 1, col = "red", lwd = 2, lty = 2)
plot(subset_Obs_flow[[name]], subset_HYPE_Data[[name]],
main = "Scatterplot for HYPE",
xlab = "Observed",
ylab = "HYPE",
pch = 19,
xlim = range_values,
ylim = range_values)
abline(a = 0, b = 1, col = "red", lwd = 2, lty = 2) # Red, dashed line
# Create the scatter plot with equal axis limits
plot(subset_Obs_flow[[name]], subset_RAVEN_Data[[name]],
main = paste("Scatterplot for RAVEN"),
xlab = "Observed",
ylab = "RAVEN",
pch = 19,
xlim = range_values,
ylim = range_values)
# Add a red, dashed line
abline(a = 0, b = 1, col = "red", lwd = 2, lty = 2)
main_title <- paste("Comparison of Models for Gauge", name, "for the time period of", start_date, "to", end_date)
mtext(main_title, side = 3, line = 3, cex = 0.9, adj = 1.1)
############ Scatterplot
start_date <- as.POSIXct("1980-10-01")
end_date <- as.POSIXct("2015-09-30")
# Subset the data within the given time frame
subset_Obs_flow <- Obs_flow[Obs_flow$Date >= start_date & Obs_flow$Date <= end_date, c("Date", name)]
subset_PRMS_Data <- PRMS_Data_All[PRMS_Data_All$Date >= start_date & PRMS_Data_All$Date <= end_date, c("Date", name)]
subset_HYPE_Data <- HYPE_Data_All[HYPE_Data_All$Date >= start_date & HYPE_Data_All$Date <= end_date, c("Date", name)]
subset_RAVEN_Data <- RAVEN_Data_All[HYPE_Data_All$Date >= start_date & HYPE_Data_All$Date <= end_date, c("Date", name)]
# Plot the subset data
# Calculate the range for the axes
min_value <- min(c(subset_Obs_flow[[name]], subset_PRMS_Data[[name]], subset_HYPE_Data[[name]], subset_RAVEN_Data[[name]]), na.rm = TRUE)
max_value <- max(c(subset_Obs_flow[[name]], subset_PRMS_Data[[name]], subset_HYPE_Data[[name]], subset_RAVEN_Data[[name]]), na.rm = TRUE)
range_values <- c(min_value, max_value)
# Set up a 1x2 grid for plots
par(mfrow = c(1, 3))
# Create the scatter plot with equal axis limits
plot(subset_Obs_flow[[name]], subset_PRMS_Data[[name]],
main = paste("Scatterplot for PRMS"),
xlab = "Observed",
ylab = "PRMS",
pch = 19,
xlim = range_values,
ylim = range_values)
# Add a red, dashed line
abline(a = 0, b = 1, col = "red", lwd = 2, lty = 2)
plot(subset_Obs_flow[[name]], subset_HYPE_Data[[name]],
main = "Scatterplot for HYPE",
xlab = "Observed",
ylab = "HYPE",
pch = 19,
xlim = range_values,
ylim = range_values)
abline(a = 0, b = 1, col = "red", lwd = 2, lty = 2) # Red, dashed line
# Create the scatter plot with equal axis limits
plot(subset_Obs_flow[[name]], subset_RAVEN_Data[[name]],
main = paste("Scatterplot for RAVEN"),
xlab = "Observed",
ylab = "RAVEN",
pch = 19,
las = 2,
xlim = range_values,
ylim = range_values)
# Add a red, dashed line
abline(a = 0, b = 1, col = "red", lwd = 2, lty = 2)
grid()
main_title <- paste("Comparison of Models for Gauge", name, "for the time period of", start_date, "to", end_date)
mtext(main_title, side = 3, line = 3, cex = 0.9, adj = 1.1)
# Define start and end dates
start_date <- as.POSIXct("1980-10-01")
end_date <- as.POSIXct("2015-09-30")
# Function to subset data based on date range
subset_data <- function(data, name) {
subset(data[data$Date >= start_date & data$Date <= end_date, c("Date", name)])
}
# Subset the data for each model
subset_Obs_flow <- subset_data(Obs_flow, name)
subset_PRMS_Data <- subset_data(PRMS_Data_All, name)
subset_HYPE_Data <- subset_data(HYPE_Data_All, name)
subset_RAVEN_Data <- subset_data(RAVEN_Data_All, name)
# Calculate the range for the axes
range_values <- range(c(subset_Obs_flow[[name]],
subset_PRMS_Data[[name]],
subset_HYPE_Data[[name]],
subset_RAVEN_Data[[name]]), na.rm = TRUE)
# Function to create scatter plots
create_scatter_plot <- function(observed, model_data, model_name) {
plot(observed, model_data,
main = paste("Scatterplot for", model_name),
xlab = "Observed",
ylab = model_name,
pch = 19,
xlim = range_values,
ylim = range_values,
las = ifelse(model_name == "RAVEN", 2, 1))  # Rotate y-axis text for RAVEN only
abline(a = 0, b = 1, col = "red", lwd = 2, lty = 2)
grid()
}
# Set up a 1x3 grid for plots
par(mfrow = c(1, 3))
# Create scatter plots for each model
create_scatter_plot(subset_Obs_flow[[name]], subset_PRMS_Data[[name]], "PRMS")
create_scatter_plot(subset_Obs_flow[[name]], subset_HYPE_Data[[name]], "HYPE")
create_scatter_plot(subset_Obs_flow[[name]], subset_RAVEN_Data[[name]], "RAVEN")
# Define start and end dates
start_date <- as.POSIXct("1980-10-01")
end_date <- as.POSIXct("2015-09-30")
# Function to subset data based on date range
subset_data <- function(data, name) {
subset(data[data$Date >= start_date & data$Date <= end_date, c("Date", name)])
}
# Subset the data for each model
subset_Obs_flow <- subset_data(Obs_flow, name)
subset_PRMS_Data <- subset_data(PRMS_Data_All, name)
subset_HYPE_Data <- subset_data(HYPE_Data_All, name)
subset_RAVEN_Data <- subset_data(RAVEN_Data_All, name)
# Calculate the range for the axes
range_values <- range(c(subset_Obs_flow[[name]],
subset_PRMS_Data[[name]],
subset_HYPE_Data[[name]],
subset_RAVEN_Data[[name]]), na.rm = TRUE)
# Function to create scatter plots
create_scatter_plot <- function(observed, model_data, model_name) {
plot(observed, model_data,
main = paste("Scatterplot for", model_name),
xlab = "Observed",
ylab = model_name,
pch = 19,
xlim = range_values,
ylim = range_values,
las = 2) # Rotate y-axis text for RAVEN only
abline(a = 0, b = 1, col = "red", lwd = 2, lty = 2)
grid()
}
# Set up a 1x3 grid for plots
par(mfrow = c(1, 3))
# Create scatter plots for each model
create_scatter_plot(subset_Obs_flow[[name]], subset_PRMS_Data[[name]], "PRMS")
create_scatter_plot(subset_Obs_flow[[name]], subset_HYPE_Data[[name]], "HYPE")
create_scatter_plot(subset_Obs_flow[[name]], subset_RAVEN_Data[[name]], "RAVEN")
View(subset_RAVEN_Data)
View(subset_PRMS_Data)
# Define start and end dates
start_date <- as.POSIXct("1981-10-01")
end_date <- as.POSIXct("2015-09-30")
# Function to subset data based on date range
subset_data <- function(data, name) {
subset(data[data$Date >= start_date & data$Date <= end_date, c("Date", name)])
}
# Subset the data for each model
subset_Obs_flow <- subset_data(Obs_flow, name)
subset_PRMS_Data <- subset_data(PRMS_Data_All, name)
subset_HYPE_Data <- subset_data(HYPE_Data_All, name)
subset_RAVEN_Data <- subset_data(RAVEN_Data_All, name)
# Calculate the range for the axes
range_values <- range(c(subset_Obs_flow[[name]],
subset_PRMS_Data[[name]],
subset_HYPE_Data[[name]],
subset_RAVEN_Data[[name]]), na.rm = TRUE)
# Function to create scatter plots
create_scatter_plot <- function(observed, model_data, model_name) {
plot(observed, model_data,
main = paste("Scatterplot for", model_name),
xlab = "Observed",
ylab = model_name,
pch = 19,
xlim = range_values,
ylim = range_values,
las = 2) # Rotate y-axis text for RAVEN only
abline(a = 0, b = 1, col = "red", lwd = 2, lty = 2)
grid()
}
# Set up a 1x3 grid for plots
par(mfrow = c(1, 3))
# Create scatter plots for each model
create_scatter_plot(subset_Obs_flow[[name]], subset_PRMS_Data[[name]], "PRMS")
create_scatter_plot(subset_Obs_flow[[name]], subset_HYPE_Data[[name]], "HYPE")
create_scatter_plot(subset_Obs_flow[[name]], subset_RAVEN_Data[[name]], "RAVEN")
# Add a main title
main_title <- paste("Comparison of Models for Gauge", name, "for the time period of", start_date, "to", end_date)
mtext(main_title, side = 3, line = 3, cex = 0.9, adj = 1.1)
# Define start and end dates
start_date <- as.POSIXct("1981-10-01")
end_date <- as.POSIXct("2015-09-30")
# Function to subset data based on date range
subset_data <- function(data, name) {
subset(data[data$Date >= start_date & data$Date <= end_date, c("Date", name)])
}
# Function to create scatter plots
create_scatter_plot <- function(observed, model_data, model_name, name) {
plot(observed, model_data,
main = paste("Scatterplot for", model_name),
xlab = "Observed",
ylab = model_name,
pch = 19,
xlim = range_values,
ylim = range_values,
las = 2)
abline(a = 0, b = 1, col = "red", lwd = 2, lty = 2)
grid()
}
# File path to save the plots
file_path <- "Results/scatterplots"
# Loop through each name in name_all
for (name in name_all) {
# Subset the data for each model
subset_Obs_flow <- subset_data(Obs_flow, name)
subset_PRMS_Data <- subset_data(PRMS_Data_All, name)
subset_HYPE_Data <- subset_data(HYPE_Data_All, name)
subset_RAVEN_Data <- subset_data(RAVEN_Data_All, name)
# Calculate the range for the axes
range_values <- range(c(subset_Obs_flow[[name]],
subset_PRMS_Data[[name]],
subset_HYPE_Data[[name]],
subset_RAVEN_Data[[name]]), na.rm = TRUE)
# Set up a PNG device
png_filename <- paste0(file_path, "Scatterplot_", name, ".png")
png(filename = png_filename, width = 1200, height = 600)
# Set up a 1x3 grid for plots
par(mfrow = c(1, 3))
# Create scatter plots for each model
create_scatter_plot(subset_Obs_flow[[name]], subset_PRMS_Data[[name]], "PRMS", name)
create_scatter_plot(subset_Obs_flow[[name]], subset_HYPE_Data[[name]], "HYPE", name)
create_scatter_plot(subset_Obs_flow[[name]], subset_RAVEN_Data[[name]], "RAVEN", name)
# Add a main title
main_title <- paste("Comparison of Models for Gauge", name, "for the time period of", start_date, "to", end_date)
mtext(main_title, side = 3, line = 3, cex = 0.9, adj = 1.1)
# Close the PNG device to save the file
dev.off()
}
